name: "Run Terraform plan"
description: "Run Terraform when EKS involved"

inputs:
  aws_iam_role:
    description: "AWS IAM role"
    required: true
  aws_region:
    description: "AWS region"
    required: true
  dir:
    description: "terraform directory"
    required: true
  aws_environment:
    description: "AWS Environment"
    required: true
  terraform_action:
    description: "Terraform action that must be executed. E.g. plan|apply|init..."
    required: true
  eks_name:
    description: "EKS name"
    required: true


runs:
  using: "composite"
  steps:
    - name: Login
      id: login
      # from https://github.com/aws-actions/configure-aws-credentials/tree/main
      uses: aws-actions/configure-aws-credentials@8337ca3433e1716b025580b435b374762892752f
      with:
        role-to-assume: ${{ inputs.aws_iam_role }}
        aws-region: ${{ inputs.aws_region }}

    - name: Cache terraform modules
      id: cache-terraform-modules
      uses: actions/cache@6fd2d4538ca777f67fccddb233cf1a8ff1339012
      with:
        path: ${{ inputs.dir }}/.terraform
        key: terraform-${{ inputs.dir }}-${{ github.sha }}
        restore-keys: |
          terraform-${{ inputs.dir }}

    - name: Check kubeconfig
      shell: bash
      run: |
        echo "üî¶ Check kubeconfig file exists"

        if [[ ! -f "$HOME/.kube/config-${{ inputs.eks_name }}" ]]; then
          echo "‚ùå kubeconfig file doesn't exist into localtion: $HOME/.kube/config-${{ inputs.eks_name }}"
          exit 1
        else
          echo "‚úÖ Kubeconfig file is present under: $HOME/.kube/config-${{ inputs.eks_name }}"
        fi

    - name: Terraform ${{ inputs.terraform_action }}
      shell: bash
      run: |
        export PATH="${HOME}/bin:$PATH"

        cd "${{ inputs.dir }}" || exit

        echo "[INFO] üöÄ Run terraform ${{ inputs.terraform_action }} + kubernetes"
        if [[ "${{ inputs.terraform_action }}" == "apply" ]]; then
          bash terraform.sh ${{ inputs.terraform_action }} ${{ inputs.aws_environment }} -auto-approve -lock-timeout=300s -lock=false
        else
          bash terraform.sh ${{ inputs.terraform_action }} ${{ inputs.aws_environment }} -lock-timeout=300s -lock=false
        fi
