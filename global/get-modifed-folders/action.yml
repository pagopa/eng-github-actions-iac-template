name: "üìÅ Get modified directory and sparse checkout"
description: "Retrieve all modified directory and perform a sparse checkout."


inputs:
  start_folder:
    description: '(Optional) Starting index for path filtering'
    default: '/'
  default_end_folder_depth:
    description: '(Optional) Default end index for path slicing'
    default: 2
  include_patterns:
    description: '(Required) Patterns to include in path filtering, comma separated'
    required: true
  ignore_patterns:
    description: '(Optional) Whether to exclude ignored paths'
    default: ".github,.devops,.vscode"
  include_folders:
    description: '(Optional) Folders to include in the sparse checkout'
    default: "scripts,.utils"


outputs:
  modified_paths:
    description: "List of modified paths"
    value: ${{ steps.get-paths.outputs.modified_paths }}
  dir_changes_detected:
    description: "Determines if static analysis should run"
    value: ${{ env.dir_changes_detected }}


runs:
  using: "composite"
  steps:
    - name: ‚è¨ Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install necessary packages
      shell: bash
      run: python -m pip install --upgrade pip

    - name: üî® Get Modified Paths
      id: get-paths
      shell: bash
      run: |
        python - <<'EOF'
        import os
        import subprocess
        from typing import List
        import re
        import pathlib

        DEFAULT_IGNORED_PATHS = "${{ inputs.ignore_patterns }}".split(",")

        STARTING_INDEX = "${{ inputs.start_folder }}"
        DEFAULT_END_INDEX = ${{ inputs.default_end_folder_depth }}
        INCLUDE_PATTERNS = "${{ inputs.include_patterns }}".split(",")
        INCLUDE_FOLDERS = "${{ inputs.include_folders }}".split(",")


        def get_current_branch():
          result = subprocess.run(["git", "rev-parse", "--abbrev-ref", "HEAD"],
                                  capture_output=True, text=True)
          return result.stdout.strip()


        def get_git_diff(current_branch):
          subprocess.run(["git", "fetch", "origin"])
          result = subprocess.run(
            ["git", "diff", "--name-only", current_branch, "origin/main"],
            capture_output=True, text=True)
          with open('/tmp/diff.txt', 'w') as f:
            f.write(result.stdout)
          print(f"üë∑üèª‚Äç‚ôÇÔ∏è Current diff between {current_branch} and origin/main\n{result.stdout}\n")


        def file_check(parts):
          # Check if the last component of the path is a file and pop it if so
          if os.path.splitext(parts[-1])[1]:  # Check if the last part has an extension
            parts.pop()
          return parts

        def get_required_path(path, patterns: List):
          # Split the path into its components
          parts = path.split(os.sep)

          try:
            # Iterate over each pattern in the provided patterns list
            if not any(pattern in parts for pattern in patterns):
              if "/" in INCLUDE_PATTERNS:
                return os.sep.join(file_check(parts)[0:DEFAULT_END_INDEX])
              return ""

            for pattern in patterns:
              if not pattern in parts:
                continue
              # Find the index of the current pattern starting from the start_index
              start_index = parts.index(STARTING_INDEX) if STARTING_INDEX != "/" else 0

              # Find the index of "src" (or any other starting point defined by STARTING_INDEX)
              pattern_index = parts.index(pattern, start_index)
              # Check if there are at least two more parts after the pattern_index
              if len(parts) > pattern_index + 2:
                # Use DEFAULT_END_INDEX as the end index for the slice
                end_index = DEFAULT_END_INDEX

                # Join the relevant parts of the path and return the result
                return os.sep.join(file_check(parts)[pattern_index:end_index])
              else:
                # If the path is too short, return an empty string
                return os.sep.join(file_check(parts)[pattern_index:])
          except (ValueError, IndexError) as e:
            # If any error occurs (like value not found or index error), return an empty string
            print(e)
            return ""

        def inspect_for_source_dependence(paths):
            local_import_paths = []

            def is_binary_file(file_path):
                """Controlla se un file √® binario analizzando i primi byte."""
                try:
                    with open(file_path, 'rb') as f:
                        # Legge i primi 1024 byte del file
                        chunk = f.read(1024)
                        # Cerca caratteri nulli o altri caratteri non-ASCII
                        return b'\0' in chunk or len(chunk.decode('utf-8', errors='ignore')) != len(chunk)
                except Exception:
                    # In caso di errore, considera il file come binario per sicurezza
                    return True

            for path in paths:
                print(f"il PATH: {path}")
                if not os.path.exists(path):
                    continue

                for file_name in os.listdir(path):
                    file_path = os.path.join(path, file_name)

                    if pathlib.Path(file_name.suffix).lower() == ".md":
                        continue

                    # Salta le directory
                    if os.path.isdir(file_path):
                        continue

                    # Salta i file binari
                    if is_binary_file(file_path):
                        continue

                    try:
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file_reader:
                            dir_name = os.path.dirname(file_path)
                            local_import_pattern = r'source\s*=\s*["\'](?!https?:\/\/)([^"\']+)["\']'
                            for line in file_reader:
                                match = re.search(local_import_pattern, line)
                                if match:
                                    print(f"0: {match.group(0)}")
                                    print(f"1: {match.group(1)}")
                                    raw_path = match.group(1)
                                    rel_path = raw_path.replace("file://", "")
                                    full_path = os.path.normpath(os.path.join(dir_name, rel_path))
                                    print(f"üí¨ {full_path}")
                                    local_import_paths.append(full_path)
                                else:
                                    print(f"OOO {match} - {line}")
                    except Exception as e:
                      print(f"‚ö†Ô∏è Warn on dependencies check: {e}")
            return local_import_paths


        def get_modified_paths(patterns: List):
            with open('/tmp/diff.txt') as f:
                lines = f.readlines()
            paths = [
                line.strip()
                for line in lines
                if not any(ignored in line for ignored in DEFAULT_IGNORED_PATHS)
            ]

            # Removing duplicates and sorting
            unique_paths = sorted(set([
                get_required_path(path, patterns)
                for path in paths if path
            ]))
            unique_paths.extend(inspect_for_source_dependence(unique_paths))

            # Filtra per escludere i percorsi che iniziano con '../'
            filtered_paths = [path for path in unique_paths if not path.startswith('../')]

            return filtered_paths


        def write_to_file(content, filepath):
          with open(filepath, 'w') as f:
            f.write(content)


        def main():
          current_branch = get_current_branch()
          print(f"Current branch: {current_branch}")

          print("üîç get_git_diff")
          get_git_diff(current_branch)

          # Combine the results of the two calls into a single list
          modified_paths = get_modified_paths(INCLUDE_PATTERNS)
          print(f"üîç get_modified_paths\n{modified_paths}")

          # Add included folders in modified paths
          modified_paths.extend(INCLUDE_FOLDERS)

          # Join all modified paths into a single string separated by new lines
          modified_paths_str = "\n".join(modified_paths)

          # Print the results
          print(f"üìå Modified paths:\n{modified_paths_str}")

          write_to_file(modified_paths_str, "/tmp/paths.txt")
          print("üìã paths changed successfully saved.")

          if not os.getenv('GITHUB_ENV'):
            os.environ['GITHUB_ENV'] = 'dir_changes_detected=false\n'

          # Condition to accept any string (no filter applied)
          if not INCLUDE_PATTERNS or "*" in INCLUDE_PATTERNS or "/" in INCLUDE_PATTERNS:
              print("üîç No filter applied: considering all strings.")
              matched_paths = modified_paths_str.split("\n")  # All paths are accepted
              print(f"üê≥ The following paths were found: {matched_paths}")
          else:
              print("üîç Active filter: verifying matches with specific patterns.")
              # Filter paths based on the specified patterns
              matched_paths = [
                  path for path in modified_paths_str.split("\n")
                  if any(pattern in path for pattern in INCLUDE_PATTERNS)
              ]
              print(f"üõ†Ô∏è The following paths were found: {matched_paths}")

          # Process the results or execute actions on the matched paths
          if matched_paths:
              print(f"‚úÖ The following matching paths were found: {matched_paths}")
              with open(os.getenv('GITHUB_ENV'), 'a') as f:
                f.write('dir_changes_detected=true\n')
          else:
              print("‚ùå No paths match the specified filters.")
              with open(os.getenv('GITHUB_ENV'), 'a') as f:
                f.write('dir_changes_detected=false\n')

        if __name__ == "__main__":
          main()
        EOF

    - name: ‚è¨ Download Modified Folders Only
      if: env.dir_changes_detected == 'true'
      id: download_changed_folders
      shell: bash
      run: |
        # Read all paths and download only the modified folders
        MODIFIED_FOLDERS=($(cat /tmp/paths.txt))
        echo "üìÅ Current modified directory: ${MODIFIED_FOLDERS[@]}"

        # Initialize git sparse-checkout
        git sparse-checkout init --cone

        # Set each path in MODIFIED_FOLDERS for sparse-checkout
        git sparse-checkout set "${MODIFIED_FOLDERS[@]}"

        # Checkout the latest changes
        git checkout
